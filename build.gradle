plugins {
    id "org.springframework.boot" version "2.3.0.RELEASE"
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'idea'
    id 'application'
    id 'maven-publish'
    id "io.freefair.lombok" version "4.1.6"
}

group 'org.hamster'
version = "1.0.0.${BUILD_ID}"
mainClassName = 'org.hamster.Application'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

tasks.distZip.enabled = false
tasks.distTar.enabled = false

configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(bootJar)
    }
    testCompile {
        /*Exclude JUnit4, because JUnit 5 MUST be used */
//        exclude group: 'junit', module: 'junit'
    }
    jaxb
}

jar {
    manifest {
        attributes 'Version': archiveVersion,
                'Build-time': new Date().format("dd-MM-yyyy'T'HH:mm:ss")
    }
}

repositories {
    mavenCentral()
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/xsd/maven-metadata.xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 11, target: 11, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath,
                    includeAntRuntime: false) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:2.2.2.RELEASE'

    //spring boot deps
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //logger
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'ch.qos.logback:logback-core:1.2.3'
    implementation 'ch.qos.logback:logback-access:1.2.3'
    implementation 'net.logstash.logback:logstash-logback-encoder:6.3'
    implementation 'org.slf4j:slf4j-api'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    implementation 'io.github.openfeign:feign-jaxb:11.0'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.apache.commons:commons-dbcp2'
    implementation 'org.postgresql:postgresql'
    implementation 'javax.validation:validation-api'

    test.useJUnitPlatform()
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation('org.junit.jupiter:junit-jupiter-engine')
    testImplementation('org.junit.jupiter:junit-jupiter-params')
    testImplementation('org.junit.platform:junit-platform-launcher')
    testImplementation('org.junit.platform:junit-platform-commons')
    testImplementation('org.assertj:assertj-core')

    implementation 'wsdl4j:wsdl4j:1.6.3'
    jaxb 'org.glassfish.jaxb:jaxb-xjc:2.3.3'
    implementation(files(genJaxb.classesDir).builtBy(genJaxb))
}

extensions.getUserInfo = {
    def gitUser = "git config user.name".execute().text.replaceAll("\\s+", "")
    def gitMail = "git config user.email".execute().text.replaceAll("\\s+", "")
    return "${gitUser}_${gitMail}"
}